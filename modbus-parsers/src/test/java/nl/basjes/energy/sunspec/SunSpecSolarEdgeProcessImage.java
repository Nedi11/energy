/*
 * Energy readers and parsers toolkit
 * Copyright (C) 2019-2019 Niels Basjes
 *
 * This work is licensed under the Creative Commons
 * Attribution-NonCommercial-NoDerivatives 4.0 International License.
 *
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://creativecommons.org/licenses/by-nc-nd/4.0/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

package nl.basjes.energy.sunspec;

import nl.basjes.energy.AbstractSunSpecProcessImage;

public class SunSpecSolarEdgeProcessImage extends AbstractSunSpecProcessImage {

    public SunSpecSolarEdgeProcessImage(Integer offset, Integer unit) {
        super(offset, unit);
    }

    public byte[] getRawBytes() {
        // Data extracted from the SolarEdge of a colleague of mine
        byte[] bytes = {
            // The SunS header
            (byte)0x53, (byte)0x75, (byte)0x6E, (byte)0x53,

            // Model Id 1 at 40004.
            (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x41, // Model header
            // Model Id 1 is 65 bytes.
            (byte)0x53, (byte)0x6F, (byte)0x6C, (byte)0x61, (byte)0x72, (byte)0x45, (byte)0x64, (byte)0x67,
            (byte)0x65, (byte)0x20, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x53, (byte)0x45, (byte)0x33, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x48, (byte)0x2D,
            (byte)0x52, (byte)0x57, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x42, (byte)0x4E, (byte)0x4E,
            (byte)0x34, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x34, (byte)0x2E, (byte)0x30, (byte)0x30, (byte)0x30,
            (byte)0x36, (byte)0x2E, (byte)0x30, (byte)0x30, (byte)0x32, (byte)0x34, (byte)0x00, (byte)0x00,
            (byte)0x37, (byte)0x33, (byte)0x31, (byte)0x41, (byte)0x32, (byte)0x42, (byte)0x37, (byte)0x30,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x01,

            // Model Id 101 at 40071.
            (byte)0x00, (byte)0x65, (byte)0x00, (byte)0x32, // Model header
            // Model Id 101 is 50 bytes.
            (byte)0x00, (byte)0xDC, (byte)0x00, (byte)0xDC, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
            (byte)0xFF, (byte)0xFE, (byte)0x09, (byte)0x67, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
            (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
            (byte)0x13, (byte)0xE4, (byte)0xFF, (byte)0xFF, (byte)0xC3, (byte)0x56, (byte)0xFF, (byte)0xFD,
            (byte)0x14, (byte)0xC1, (byte)0xFF, (byte)0xFF, (byte)0x3B, (byte)0x46, (byte)0xFF, (byte)0xFE,
            (byte)0x25, (byte)0x6F, (byte)0xFF, (byte)0xFE, (byte)0x00, (byte)0x00, (byte)0x45, (byte)0x0F,
            (byte)0x00, (byte)0x00, (byte)0x34, (byte)0xA5, (byte)0xFF, (byte)0xFC, (byte)0x0E, (byte)0xFC,
            (byte)0xFF, (byte)0xFF, (byte)0x14, (byte)0x32, (byte)0xFF, (byte)0xFF, (byte)0x80, (byte)0x00,
            (byte)0x0E, (byte)0xE6, (byte)0x80, (byte)0x00, (byte)0x80, (byte)0x00, (byte)0xFF, (byte)0xFE,
            (byte)0x00, (byte)0x04, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
            (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,

            // The End Model (i.e. "No more blocks" marker
            // - BlockId == 0xFFFF == 'NaN'
            // - BlockLen == 0
            (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00
        };

        return bytes;
    }

}
